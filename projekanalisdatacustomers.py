# -*- coding: utf-8 -*-
"""ProjeAnalisDataCustomers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nPmCD2NEDg4I88FhspsclC_1wVgz0RRt

# Projek Analisis Data: E-commerce-public-dataset
- **Nama:** Muhamad Rokhul Affan
- **Email:** a355ybf300@devacademy.id
- **ID Dicoding:** morkhul

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1: Bagaimana Penyebaran Pelanggan>
- Pertanyaan 2: Bagaimana pendistribusi pengiriman?
- Pertanyaan 3: Bagaimana trend pengirimannya?

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data

Gathering data adalah salah satu cara untuk mengumpulkan data dari berbagai sumber untuk di analisa menjadi satu. Di sini saya menggunakan 2 dataset yakni data customers dan data orders.

####Customers Dataset
"""

customers_df = pd.read_csv('/content/customers_dataset.csv') #buka dataset costomers

customers_df.head(20) #melihat data awal 20 data dari atas

"""**Insight Costumers.csv:**
- dataset pada customers terdapat informasi mengenai customer_id tentang pelanggan, customer_unique_id tentang pelanggan yang lebih spesifik,	customer_zip_code_prefix tentang kode pos pelanggan,	customer_city tentang kota pelanggan, customer_state tentang negara bagian pelanggan

####Orders Dataset
"""

orders_df = pd.read_csv('/content/orders_dataset.csv') #buka dataset orders

orders_df.head(20) #melihat data awal 20 data dari atas

"""**Insight Orders:**
- dataset pada orders dataset terdapat beberapa informasi mengenai order_id tentang kode order,	customer_id tentang pelanggan,	order_status tentang status pengiriman order,	order_purchase_timestamp tentang waktu pesanan dilakukan, order_approved_at	tentang waktu pesanan di terima, order_delivered_carrier_date	tentang waktu pesanan dikirimkan kurir, order_delivered_customer_date	tentang kapan diterima pesanananya, order_estimated_delivery_date tentang estimasi pengiriman.

### Assessing Data
Assessing Data dilakukan untuk memproses data untuk menyiapkan sesuai sesuai kebutuhan untuk dianalisis.

####Customers Dataset
"""

cek_tipe = customers_df.info(), #cek tipe struktur customer
print(cek_tipe)
customers_df.head(20) #tampikan 20

cek_null = customers_df.isnull().sum() #cek null di customers
print(cek_null)

cek_jumlah_duplikat = customers_df.duplicated().sum() #cek jumlah duplikat dataset customers
print(cek_jumlah_duplikat)

cek_deskripsi_customers = customers_df.describe(include='all') #cek deskripsi dataset customers
print(cek_deskripsi_customers)

"""**Insight Customers Assesing:**
- dataset pada customers memliki 11547 baris dan 5 kolom, tipe data object semua kecuali kode pos integer
- terdapat nilai 1 kosong di customer_state
- tidak adanya duplikasi pada customer_id
- sao paolo menjadi kota terbanyak yang transaksi

####Oreders Dataset
"""

cek_tipe = orders_df.info(), #cek tipe struktur Orders
print(cek_tipe)
orders_df.head(20) #tampilkan 20

cek_null = orders_df.isnull().sum() #cek null di orders
print(cek_null)

cek_jumlah_duplikat = orders_df.duplicated().sum() #cek jumlah duplikat dataset orders
print(cek_jumlah_duplikat)

cek_deskripsi_orders = orders_df.describe(include='all') #cek deskripsi dataset orders
print(cek_deskripsi_orders)

"""**Insight Ordering Assesing:**
- dataset pada ordering memliki 76779 entri data dan 8 kolom
- order_id tak ada nilai hilang
- customer_id tak ada nilai hilang
- order_status ada 1 nilai hilang
- order_purchase_timestamp ada 1 nilai hilang
- order_approved_at ada 127 nilai hilang
- order_delivered_carrier_date ada 1369 nilai hilang
- order_delivered_customer_data ada 2281 nilai hilang
- order_estimated_delivery_date ada 1 nilai hilang
- ada order estimated_delivery_date paling sering di tanggal 29-5-2018 total 418 pesanan

### Cleaning Data
Cleaning Data adalah proses pembersihan data yang digunakan untuk bahan analisis data yang sudah sesuai dengan kebutuhan analisis kedepannya.

#### Orders Dataset
"""

orders_belum_disetujui = orders_df[orders_df ["order_approved_at"].isnull()] #tampilkan order yang belum disetujui
print(orders_belum_disetujui)

coloumn_orders = ["order_purchase_timestamp","order_approved_at", #ambil data beberapa coloumn
    "order_delivered_carrier_date","order_delivered_customer_date",
    "order_estimated_delivery_date"]

for column in coloumn_orders: #ubah beberapa kolom ke datetime
    orders_df[column] = pd.to_datetime(orders_df[column])

print(orders_df.info()) #tampilkan orders dataframe

"""**Insight Orders Cleaning:**     
 - mengubah order_purchase_timestamp, order_approved_at,  order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date dari obejct ke waktu datetime64

## Exploratory Data Analysis (EDA)

### Explor Customers
"""

tampilkan= customers_df.head(20) #tampilkan dataset customers
print(tampilkan)

deskripsikan = customers_df.describe(include='all') #deskripsi customers
print(deskripsikan)

cek_nilai_unik = customers_df.customer_id.is_unique #cek customer unik
print(cek_nilai_unik)

kota_pelanggan = customers_df.groupby("customer_city")["customer_id"].nunique() #urutakn kolom customer kota dan customer id tertinggi
kota_pelanggan_tertinggi = kota_pelanggan.sort_values(ascending=False)

print(kota_pelanggan_tertinggi)

negara_bagian_pelanggan = customers_df.groupby("customer_state")["customer_id"].nunique() #urutakn kolom negara bagian customers dan customer id tertinggi
negara_bagian_tertinggi = negara_bagian_pelanggan.sort_values(ascending=False)

print(negara_bagian_tertinggi)

"""###Merger Data"""

merger_data = customers_df.merge(orders_df,
              on="customer_id", how="inner") #gabungkan data customers id dan orders

print(merger_data.info())

merger_data.head(20) #cek 20 teratas

merger_data.to_csv("main_datas.csv", index=False) #simpan dataset penggabungan

"""**Insight EDA:**
- customer_id unik dan tidak ada duplikasi
- customer_unique_id memiliki duplikasi yang menunjukkan pelanggan melakukan lebih dari satu transaksi
- sao paolo merupakan yang memiliki pelangggan terbanyak, diikuti oleh rio de jenero dan seterusnya

## Visualization & Explanatory Analysis

### Pertanyaan 1: Bagaimana Penyebaran Pelanggan?
"""

customer_state = customers_df.groupby("customer_city")["customer_unique_id"].nunique().sort_values(ascending=False).head(20) #hitung jumlah customer di kota baru

figure1, axes1 = plt.subplots(figsize=(20, 10)) #buat bar nya

axes1.set_title("Top 20 Kota Pelanggan",
                fontsize=30) #buat judul

axes1.set_xlabel("Jumlah Pelanggan",
                 fontsize=16)  # X untuk jumlah pelanggan
axes1.set_ylabel("Kota", fontsize=16)  # Y untuk nama kota

axes1.barh(customer_state.index, customer_state.values,
           color="cyan") #buat bar horizontal dan warna bar

plt.show() #tampilkan

"""**Insight Penyebaran Pelanggan:**
- Penyebaran pelanggan terbanyak ada di Sao Paolo dengan data pelanggan lebih dari 1750 lebih pelanggan. Lalu di ikuti oleh yang kedua Rio de Janeiro dengan lebih dari 750 pelanggan. Hal ini bisa dilihat di data bahwa perbedaann top 1 dan top 2 sangat banyak hanpir 2 kali lipatnya. Lalu di lanjutkan peringkat top 3 dari Belo Horizonte di 250 pelanggan hal ini juga ada perbedaan yang sangat signifikan antara top 2 dan top 3, perbedaannya lebih dari 3 kali lipatnya lebih besar top 2.
- penyebaran dari top 4 ke top 20 perbedaannya tidak terlalu jauh karena masing masin kota pelanggannya masih di bawah 250 pelanggan.

###Pertanyaan 2:Bagaimana pendistribusi pengiriman?
"""

jumlah_pesanan_status = merger_data["order_status"].value_counts() #jumlahkan pesanan status pengiriman

plt.figure(figsize=(20, 10)) #buat grafik bar ukurannya

sns.barplot(x=jumlah_pesanan_status.index, #buat gambar palete bar
            y=jumlah_pesanan_status.values,
            palette="magma")

plt.title("Status Distribusi Pengiriman Pesanan",
          fontsize=30)  # Judul grafik
plt.ylabel("Jumlah Pesanan",
           fontsize=20)  # Nama sumbu Y
plt.xlabel("Status Pengiriman",
           fontsize=20)  # Nama sumbu X

for i, jumlah in enumerate(jumlah_pesanan_status.values): #tampilkan jumlah pesanan setiap batang
    plt.text(i, jumlah + 100,
             str(jumlah),
             ha='center',
             fontsize=10)
plt.show()

"""**Insight Pendistribusian Pengiriman:**
- Sebagian besar pesanan pelanggan dalam tahap delivered, menjelaskan bahwa ada 8641 sedang pengiriman.
- shipped canceled, unavaible, proccessing, invoce dan approved jumlahnya jauh lebih sedikit menunjukkan pesanan dalam kondisi baik dan lancar.
- rendahnya canceled daripada delivered menandakan bahwa pelanggan puas akan sistem pendistribusian.

###Pertanyaan 3: Bagaimana trend pengirimannya?
"""

if not pd.api.types.is_datetime64_any_dtype(merger_data["order_delivered_customer_date"]): #memastikan order_delivered_customer_date dalam format datetime
    merger_data["order_delivered_customer_date"] = pd.to_datetime(merger_data["order_delivered_customer_date"])

merger_data["delivery_month_year"] = merger_data["order_delivered_customer_date"].dt.to_period("M") #tambah kolom bulan dan tahun pengiriman

trend_pengiriman = merger_data.groupby("delivery_month_year").size() #Gabungkan

plt.figure(figsize=(12, 6)) #buat visualisasinya
plt.title("Tren Bulan pada Pengiriman Pesanan")
plt.xlabel("Bulan dan Tahun") #simbu x
plt.ylabel("Jumlah Pesanan Terkirim") #sumbu y
sns.lineplot(x=trend_pengiriman.index.astype(str),
             y=trend_pengiriman.values,
             marker="s", #titik kotak
             color="green")
plt.xticks(rotation=30)
plt.grid(True)
plt.show()

"""**Insight Tren Pengiriman:**
- awal trend pada data 2016-10 menunjukan adanya peningkatkan signifikan pengiriman ke tahun selanjutnya.
- puncak pengirimannya terjadi pada 2018-8 dengan jumlah lebih dari 700. hal ini bisa dikarenakan faktor musiman dalam peningkatan penjulan.
- penurunan drastis terjadi pada 2018-9 dikarenakan kemungkinan perubahan kebijaksanaan perusahaan, ada masalah logistik atau masalah trend pasar.
- adanya beberapa fluktuasi pengiriman sebelum meningkat menandakan adanya faktor musiman.

## Analisis Lanjutan (Opsional)

Menampilkan clusterisasi kategori antara customer unik di setiap kota, mengelompokkannya pada kategori kota pelanggan tertinggi, sedang dan rendah berdasarkan jumlah pelanggan unik ditiap kota yang berguna untuk menganalisis distribusi pelanggan di berbagai kota dan mengidentifikasi kota pontensial dan optimalisasi pemasaran.
"""

pelanggan_per_kota = merger_data.groupby("customer_city")["customer_id"].nunique().reset_index() #hitung jumlah pelanggan unik ditiap kota
pelanggan_per_kota.columns = ["customer_city", "customer_count"]

def kota_kategori(row): #Klasifikasi kategori kota berdasarkan jumlah pelanggan
    if row["customer_count"] >= 100: #lebih dari sama dengan 100
        return "Kota Pelanggan Tinggi"
    elif row["customer_count"] >= 50: # lebih dari sama dengan 50
        return "Kota Pelanggan Sedang"
    else:
        return "Kota Pelanggan Rendah"

pelanggan_per_kota["city_category"] = pelanggan_per_kota.apply(kota_kategori, axis=1)

plt.figure(figsize=(10, 6)) #buat visualisasi batang
plt.title("Kategori Kota Berdasarkan Jumlah Pelanggan")
plt.xlabel("Kategori Kota")
plt.ylabel("Jumlah Kota")
pelanggan_per_kota["city_category"].value_counts().plot(kind="bar",
                                                        color=["red",
                                                               "yellow",
                                                               "green"])

plt.xticks(rotation=0)
plt.show()

"""**Insight Analisis Lanjutan:**

- Berdasarkan grafik terdapat kota pelanggan rendah menunjukan adanya jumlah kota yang sangat dominan dibadnignakan kategori kota pelanggan sedang dan kota pelanggan tinggi. hal ini dikarenakan sebagian besar kota hanya memiliki sedikit pelanggan unik, sedangkan segelintir kota yang memiliki jumlah pelanggan yang cukup besar. hal yang baik dilakukan adalah memaksimalkan strategi pemasaran bisnis di kota pelanggan sedang dan tinggi karena belum menjadi pasar utama.
"""